{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","getAllComments","loadedComments","data","useState","isAddingComment","setIsAddingComment","useParams","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","error","Fragment","path","exact","to","url"],"mappings":"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","file":"static/js/4.01a6592b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__fFFIw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1o-dl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__12eOl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__G2f5R\",\"loading\":\"NewCommentForm_loading__18Sjt\",\"control\":\"NewCommentForm_control__GfgQx\",\"actions\":\"NewCommentForm_actions__3XWE1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3A8kM\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed') {\n      onAddedComment();\n    }\n  }, [status, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    sendRequest({\n      commentData: { text: enteredText },\n      quoteId: props.quoteId,\n    });\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState, useEffect } from 'react';\n\nimport CommentsList from './CommentsList';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { useCallback } from 'react';\n\nconst Comments = () => {\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = (\n      <div className=\"centered \">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p>No comments were added yet </p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from 'react';\r\nimport { Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n  // console.log(match.url);\r\n\r\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found !</p>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      {/* <Route path={`/quotes/${params.quoteId}/comments`}> */}\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}